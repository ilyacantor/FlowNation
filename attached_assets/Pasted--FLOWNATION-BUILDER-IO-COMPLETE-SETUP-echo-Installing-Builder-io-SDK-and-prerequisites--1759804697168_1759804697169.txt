# üß© FLOWNATION + BUILDER.IO COMPLETE SETUP

echo "üöÄ Installing Builder.io SDK and prerequisites..."
npm install @builder.io/react lucide-react

echo "üìÅ Creating /builder directory and registration file..."
mkdir -p builder

cat <<'EOF' > builder/registerComponents.js
import { Builder } from "@builder.io/react";
import HeroSection from "../src/components/HeroSection";
import FeatureGrid from "../src/components/FeatureGrid";
import MetricsBand from "../src/components/MetricsBand";
import BenefitsSection from "../src/components/BenefitsSection";
import Footer from "../src/components/Footer";

// ---- HERO ----
Builder.registerComponent(HeroSection, {
  name: "Hero Section",
  inputs: [
    { name: "title", type: "string", defaultValue: "Your World of Endurance" },
    { name: "subtitle", type: "text", defaultValue: "Choose your sport..." },
    { name: "background", type: "file", allowedFileTypes: ["jpg", "png"] },
  ],
});

// ---- FEATURE GRID ----
Builder.registerComponent(FeatureGrid, {
  name: "Feature Grid",
  inputs: [
    { name: "title", type: "string", defaultValue: "Explore Your Potential" },
    {
      name: "features",
      type: "list",
      subFields: [
        { name: "title", type: "string" },
        { name: "desc", type: "text" },
        { name: "icon", type: "string" },
      ],
    },
  ],
});

// ---- METRICS ----
Builder.registerComponent(MetricsBand, {
  name: "Metrics Band",
  inputs: [
    { name: "headline", type: "string" },
    { name: "subtext", type: "text" },
  ],
});

// ---- BENEFITS ----
Builder.registerComponent(BenefitsSection, {
  name: "Benefits Section",
  inputs: [
    {
      name: "benefits",
      type: "list",
      subFields: [
        { name: "title", type: "string" },
        { name: "desc", type: "text" },
        { name: "icon", type: "string" },
      ],
    },
  ],
});

// ---- FOOTER ----
Builder.registerComponent(Footer, {
  name: "Footer",
  inputs: [
    { name: "tagline", type: "string" },
    { name: "subtext", type: "string" },
  ],
});
EOF

echo "‚öôÔ∏è Injecting Builder import into App.jsx..."
APP_FILE="src/App.jsx"
if grep -q "registerComponents" "$APP_FILE"; then
  echo "Builder already imported."
else
  sed -i '1i import "../builder/registerComponents";' "$APP_FILE"
fi

echo "üß± Creating visual page bridge for Builder in landing.jsx..."
mkdir -p src/pages

cat <<'EOF' > src/pages/landing.jsx
import React, { useEffect, useState } from "react";
import { builder, BuilderComponent } from "@builder.io/react";

builder.init(process.env.BUILDER_API_KEY);

export default function Landing() {
  const [content, setContent] = useState(null);

  useEffect(() => {
    builder
      .get("page", { url: window.location.pathname })
      .promise()
      .then(setContent);
  }, []);

  return (
    <div className="min-h-screen bg-black text-white">
      <BuilderComponent model="page" content={content} />
    </div>
  );
}
EOF

echo "üîê Requesting Builder API Key..."
read -p "Enter your Builder.io Public API Key: " BUILDER_KEY
echo "Storing in Replit secrets..."
echo "BUILDER_API_KEY=$BUILDER_KEY" >> .env

echo "‚úÖ Setup Complete!"
echo "Next steps:"
echo "1Ô∏è‚É£ Log into https://builder.io and create a new space named 'FlowNation'."
echo "2Ô∏è‚É£ Use your Replit Preview URL to connect Builder's Visual Editor."
echo "3Ô∏è‚É£ Add and edit components visually ‚Äî your site will update instantly!"
